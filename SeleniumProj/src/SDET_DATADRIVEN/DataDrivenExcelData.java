package SDET_DATADRIVEN;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;


// Code for data driven test by reading data from a excel file


public class DataDrivenExcelData {

	
	WebDriver driver;
	
	@SuppressWarnings("deprecation")
	@BeforeClass
	public void setup()
	{
        System.setProperty("webdriver.chrome.driver", "E:\\seleniumfiles\\chromedriver_win32\\chromedriver.exe");
		
	    driver = new ChromeDriver();  // creating chrome browser driver in web driver interface
	    
	    driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		
		driver.manage().window().maximize();     // maximize the browser window 
		
	}
	
	
	

	  // This method runs with multiple sets of test data and that data generated by a @DataProvider annotation method
	
	@Test(dataProvider="LoginData")

	public void loginTest(String user, String pwd, String exp)       // exp is used to check data us valid or not   
	{
		driver.get("https://admin-demo.nopcommerce.com/login/");
		
		WebElement txtEmail = driver.findElement(By.id("Email"));
		txtEmail.clear();
		txtEmail.sendKeys(user);    // this user name value is coming from a Data provider annotation method
		
		WebElement txtPassword = driver.findElement(By.id("Password"));
		txtPassword.clear();
		txtPassword.sendKeys(pwd);      // this pwd value coming from a Data Provider annotation method
		
		driver.findElement(By.xpath("//button[@type='submit']")).click();   // clicking on login button
		
		
		String exp_title = "Dashboard / nopCommerce administration";  // expected title after login, we get this from developer
		
		String act_title = driver.getTitle();   // actual title
		
		
		
		// Here we cover scenario of positive as well as negative testing both
		
		if(exp.equals("Valid"))          // This if condition code is for positive testing means for valid data
		{
			if(exp_title.equals(act_title))     // to check login is successful or not
			{
				driver.findElement(By.linkText("Logout")).click();
				Assert.assertTrue(true);      // This test case passed means our login successful
				
			}
			
			else
			{
				Assert.assertTrue(false);  // here we fail test case intentionally 
				
			}
			
			
		}
		
		
		else if(exp.equals("Invalid"))          // This if condition code is for negative testing means for Invalid data
		{
			if(exp_title.equals(act_title))  // to check login is successful or not
			{
				driver.findElement(By.linkText("Logout")).click();
				Assert.assertTrue(false);    // here we fail my test case because we pass here invalid data
				
			}
			
			else
			{
				Assert.assertTrue(true);
				
			}
			
		}
		         
		
		
		
		
	}
	
	
	

	

	
	
	
	
	// Data Provider annotation provide data to another test method
	// Now we create a data provider method, Data provider method always returns a 2D array, so we take return type String[][] in 2d format
	
	// Here data is only string so we use return type as a String[][], if data is present in string as well as in number format so then use return type as Object[][]
	
	@DataProvider(name="LoginData")
	public String[][] getData() throws IOException {

		// Here we get the data from a excel and maintain the data in a 2D array because we have data is in 2D array in excel file
	  // So here we create a 2D array of string type
		
		
	String path = "C:\\Users\\Vipin Shukla\\eclipse-workspace\\SeleniumProj\\sdetinputdatadriven.xlsx"; // here my excel data file is present
	
	XLUtility xlutil = new XLUtility(path);  // to access methods of XLUtility class
	
	
	int totalrows = xlutil.getRowCount("Sheet1");        // get a total no. of rows present in a Sheet
	int totalcols = xlutil.getCellCount("Sheet1", 1);     // get a total no. of columns/cells present in a Sheet
	
	String loginData[][] = new String[totalrows][totalcols];    // create a 2D array according to the size of no of rows and column present in a excel data file
	
	
	
	// Now we read the data from a excel and keep the data in 2D array
	
	// Here we use 2 loops, first loop is for rows and 2nd loop is for cells in each row
	
	for(int i=1; i<=totalrows; i++)   // This outer loop is for rows
	{
		
		for(int j=0; j<totalcols; j++)   // inner for loop is for no. of cells in each row, this will increment cell every time
		{                               // inner for loop runs till all the cell value is coming 
			
			
			loginData[i-1][j] = xlutil.getCellData("Sheet1", i, j);   //  here we get cell data and then we store data in 2Darray
			                                                           // we use i-1 because we ignore header part in excel file
			
		}
		
	}
	
	
	
		
		
		return loginData;
		
	}
	
	
	
	
	@AfterClass
	void tearDown()
	{
		driver.close();
		
	}
}
